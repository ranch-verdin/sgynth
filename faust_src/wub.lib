import("stdfaust.lib");
import("sat.lib");
import("svf.lib");

saw_distortion_curve(colour) = + (colour) : pseudotanh : -(colour);
saw_filter(freq,gate) = hgroup("filter",
			       *(drive)
			       : svf_lpf(filt_freq,
					 filt_q,
					 saw_distortion_curve(colour))) with {
  colour = 0.12// vslider("colour", 0.1, 0.0, 0.50, 0.01)
  ;
  drive = 0.42// vslider("drive", 0.1, 0.1,2.0,0.01)
  ;
  filt_q = vslider("q",1.2,0.8,5,0.001);
  filt_env = vslider("env",20.0,0,50.0,0.01);
  filt_basis = vslider("basefreq",0.8,0,10.0,0.01);
  fattack = vslider("attack",150,0.1,1000,0.1) * 0.001;
  fdecay = vslider("decay",300,0.1,1000,0.1) * 0.001;
  fsustain = vslider("sustain",0.0,0.0,1.0,0.1);
  frelease = vslider("release",50.0,0.1,1000,0.1) * 0.001;
  env = en.adsre(fattack,fdecay,fsustain,frelease,gate);
  filt_freq = freq*(filt_basis + env * filt_env);
};

sawnote(freq,gate) = os.sawtooth(freq) * en.are(attack,release,gate)
		     : fi.lowpass(2,6000)
		     :saw_filter(freq,gate)
		     : *(vslider("vol",0.2,0,5.0,0.01))
		     : fi.lowpass(2,6000)
		     : + (0.2) : pseudotanh : -(0.2) with {
  attack = 0.1// vslider("attack",1,0.1,1000,0.1)
	   * 0.001;
  release = vslider("release",1,0.1,1000,0.1) * 0.001;
};

wub = hgroup("wub",freq,gate :hgroup("params",sawnote)) with {
  freq = vslider("freq", 100.0, 10.0, 2000.0, 0.1) : si.smooth(1 - vslider("portamento",0.5,0.01,1.0,0.01) * 0.001);
  gate = vslider("gate",0.0,0.0,1.0,1.0);
};

